 /* unit-test-runner.
    dieses main macht nix anderes als einen via mainparm angegebenen fetchable zu rufen.
 */
 BGTESA2: PROC() OPTIONS(MAIN);
 
 %XINCLUDE FLCERR1#; /* ZEK Errorhandling */
 %XINCLUDE FLGGCB0#; /* ZEK GGCB */
 %XINCLUDE FLEPLI01; /* ZEK EPLI-Compat */
 %XINCLUDE FLLIST0#; /* Dynamische Listen */
 %XINCLUDE FLPARM0#; /* parse_value(..) */
 %XINCLUDE BGUTII0#; /* typen, consts, ...*/
 
 // for tc only
 %$BGCOM_INIT = 'J';
 %$BGCOM_ALLOC_BATCH = 'J';
 %XINCLUDE BGCOM#01; /* bgcom ptr & fld */
 %XINCLUDE BGCOM#21; /* structs bgcom, tcinf, cwa, term_tab, ... */
 %XINCLUDE RGC00B0#; /* INIT_BGCOM_CWA, cwa f. batch */
 %XINCLUDE FLTMST0#; /* fu_timestamp */
 CWAN.DSATABPTR  = NULL;//DSATAB_PTR;
 BGCOM.VERSION = '02';
 BGCOM.INSTANZ = GGCB_AWS.INSTANZ;
 BGCOM.KZEBENE = GGCB_AWS.EBENE;
 BGCOM.BLOCK = '2';            /** IMS2DB2                        */
 BGCOM.UMGKZ = 'B';            /** UMGEBUNGSKENNZEICHEN: BATCH    */
 BGCOM.KZVERR = 'N';           /** TRACO NICHT VERECHNEN          */
 BGCOM.DO_ROLLB = 'N';
 BGCOM.DO_COMMIT = 'N';
 BGCOM.ROLLB_DONE = 'N';
 BGCOM.COMMIT_DONE = 'N';
 
 RGC00_BGCOMPTR  = BGCOMPTR;
 RGC00_AKT_TSAEN = RGC00_AKT_TS;
 RGC00_START     = GGCB_COMMON.EXEC_DATE;
 RGC00_BUDAT     = GGCB_COMMON.EXEC_DATE;
 
 TCINF.USERID = 'BGTESA2';
 TCINF.KZROBOTV = '0';        /** KEINE VERRECHNUNG ROBOTER       */
 TCINF.KZROBOT = '0';         /** KEINE VERRECHNUNG BEI BATCH     */
 TCINF.TRNID = 'G393';
 TCINF.TRMID = 'L000';
 TCINF.PROD_KENN = 'BGTESA2';
 TCINF.FROMPROG = 'BGTESA2';
 RGC00_AKT_TS    = FU_TIMESTAMP(GGCB_COMMON.EXEC_DATE, 'JHJJ-MM-TT');
 RGC00_AKT_TSAEN = RGC00_AKT_TS;
 RGC00_START_TS  = FU_TIMESTAMP(GGCB_COMMON.EXEC_DATE, 'JHJJ-MM-TT');
 TERM_TAB.BLZ = 34000;
 CALL INIT_BGCOM_CWA(RGC00_BGCOMPTR,    RGC00_AKT_TS,
                     RGC00_AKT_TSAEN,   RGC00_BUDAT,
                     RGC00_START,       RGC00_START_TS);
 IF(BGCOM.RC ^= 0) THEN CERR_PTR = PUT_CERR();
 
 
 ON ERROR CALL PLIDUMP('HB');
 
 
 dcl fetchable_name char(8);
 
 /** @MAINPARAM(MODUL, CHAR, -): name des fetchable das gestartet wird */
 select(PARSE_VALUE((GGCB_MAINPARM),'MODUL','C'
                  ,size(fetchable_name)
                  ,addr(fetchable_name)));
   when(0);
   other fetchable_name = '';
 end;
 
 DCL MIT_BGCOM TYPE BOOLEAN;
 /** @MAINPARAM(MITBGCOM, CHAR, -): name des fetchable das gestartet wird */
 MIT_BGCOM = (0 = PARSE_VALUE( (GGCB_MAINPARM), 'MIT_BGCOM' ) );
 
 if rc_c.ok <> CALL_FETCHABLE(fetchable_name) then cerr_ptr = put_cerr();
 
 /** @presentation(none) */
 call_fetchable: proc(name) returns(type rc_t);
   dcl name char(15) nonassignable;
 
   dcl exFetch external entry() options(fetchable); /* entry var */
   dcl exFetchTc external entry(ptr) options(fetchable); /* entry var */
 
   dcl fetchable_rc      type rc_t init(rc_c.ok);
   dcl fetch_error       type boolean init(false);
   dcl save_oncode       bin fixed(31) init(0);
   dcl fehlertext_oncode char(60) varying;
 
   /* spezifisches error handling: bei einem Error beim Laden wird nicht einfach abgebrochen
      sondern protokolliert und */
   on error begin;
     save_oncode = oncode();
     if ^fetch_error then do;          /* Absicherung gegen kreisen */
       fetch_error = '1'b;
       goto error_condition;
     end;
   end;
 
   fetch exFetch title(trim(name)); /* Fetchable laden */
 
   error_condition:;
   revert error;                 /* wieder auf Default zuruecksetzen */
 
   if (fetch_error) then do; /* Fehler beim Laden d. Fetchable */
     /* spezifische Fehlertexte fuer OnCodes */
     select(save_oncode);
       when(9250) fehlertext_oncode = '9250, Procedure to be fetched cannot be found';
       when(9251) fehlertext_oncode = '9251, Permanent transmission error when ' !!
         'fetching a procedure';
       otherwise fehlertext_oncode = char(save_oncode);
     end;
     /**
      * @explanation: Beim Fetch eines Programmes ist ein Fehler aufgetreten.
      * @response: Fehlerbehandlung entsprechend Oncode (zB Programm nicht gefunden)
      */
     cerr_ptr = sys_error( 'bgauxa0001','Fehler ONCODE='!! trim(fehlertext_oncode) !!
                   ' bei FETCH ''' !! trim(name) !! '''', setcerr);
     fetchable_rc = -99;
   end; else do;
     if mit_bgcom
     then call exFetchTc(bgcomptr); /* Fetchable starten */
     else call exFetch();           /* Fetchable starten */
   end;
   return(fetchable_rc);
 
 end call_fetchable;
 
 end bgtesa2;
